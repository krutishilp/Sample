package com.zensar.productmanagement.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.zensar.order.processing.beans.Order;
import com.zensar.productmanagement.beans.Product;
import com.zensar.productmanagement.beans.User;
import com.zensar.productmanagement.jdbc.ConnectionProvider;

public class ProductRepositoryImpl implements ProductRepository {
	private Connection con = ConnectionProvider.getConnection();

	public int insertProduct(Product productObj) {

		Random rand = new Random();
		productObj.setProductId(rand.nextInt(100));
		try {
			PreparedStatement pstmt = con.prepareStatement("insert into products(productName,productCost) values(?,?)");
			pstmt.setString(1, productObj.getProductName());
			pstmt.setInt(2, productObj.getProductCost());
			int update = pstmt.executeUpdate();
			if (update > 0) {
				return productObj.getProductId();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return productObj.getProductId();
		
	}

	public Product[] getAllProducts(int userId) {
		List<Order> list = new ArrayList<Order>();

		try {
			pstmt = con.prepareStatement("select * from products");
			rs = pstmt.executeQuery();
			while (rs.next()) {
				list.add(new Order(rs.getInt(1), rs.getString(2), rs.getDouble(3), rs.getInt(4), rs.getString(5)));
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Order[] order = new Order[list.size()];
		order = list.toArray(order);
		return order;
	}

	public Product getProduct(int productId,int userId) {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean deleteProduct(int productId,int userId) {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean validateUser(int userId, String userPassword) {
		try {
			PreparedStatement pstmt = con.prepareStatement("select userId,password from login where userId=? and password=?");
			pstmt.setInt(1, userId);
			pstmt.setString(2, userPassword);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				return true;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return false;
	}

	public int registerUser(User user, String userPassword) {
		Random rand = new Random();
		user.setUserId(rand.nextInt(100));

		try {
			PreparedStatement pstmt = con.prepareStatement("insert into login(userId,userName,password) values(?,?,?)");
			pstmt.setInt(1, user.getUserId());
			pstmt.setString(2, user.getUserName());
			pstmt.setString(3, userPassword);
			pstmt.executeUpdate();
			pstmt = con.prepareStatement("insert into user(userId,userName,userContact,userAddress) values(?,?,?,?)");
			pstmt.setInt(1, user.getUserId());
			pstmt.setString(2, user.getUserName());
			pstmt.setLong(3, user.getUserContact());
			pstmt.setString(4, user.getUserAddress());
			int update = pstmt.executeUpdate();
			if(update>0) {
				return user.getUserId();
			}else {
				return 0;
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return user.getUserId();

	}

}
